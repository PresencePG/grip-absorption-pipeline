///////////////////////////////////////////////////////
//
// Simplified Virtual Islanding simulation model
// Copyright (C) 2016, Stanford University
// Author: aivanova@slac.stanford.edu
//
///////////////////////////////////////////////////////

#set dateformat=ISO8601

#set suppress_repeat_messages=1
#set randomseed=5
#set minimum_timestep=30
#set literal_if=FALSE
#set filesave_options=ALLINITIAL

//////////////CONFIG//////////////////////////////////
#define STARTTIME=2020-10-15T00:00:00-04:00
#define STOPTIME=2020-10-15T00:01:00-04:00
#define BASELINESTARTTIME=2020-10-15T00:00:00-04:00
#define BASELINESTOPTIME=2020-10-15T00:01:00-04:00
#define RECORDINTERVAL=30

#define TIMEZONE=EST+5EDT

#define LOCATION=LA_CA //LA_CA //BUR_VT

#define LOADS=on

#define MYSQL_AMI=off
#define SOLAR=off

#define VOLT_POWER_DUMP=off //FIX
#define COMMERCIALLOADFLAG=OFF

global bool LOAD_CONTROL 1;
#define SUPERNODES=yes

////////////// MODULES /////////////////////////////////
module residential {
	implicit_enduses REFRIGERATOR|LIGHTS|PLUGS;
//	paneldump_interval 360;
}

#ifdef BASELINE
#verbose Skipping controls for baseline run
#else
module absorption;
#endif //BASELINE


module powerflow {
	solver_method NR;
	line_capacitance true;
	convergence_error_handling IGNORE;
}

module generators; // ENABLES SOLAR
module tape{

}

module reliability {
	maximum_event_length 300 s;
	report_event_log TRUE;
}

#if LOCATION==BUR_VT
#define WEATHER=VT-Burlington_International_Ap.tmy3
#endif //LOCATION
#if LOCATION==LA_CA
#define WEATHER=CA-Los_Angeles_Intl_Arpt.tmy3
#endif //LOCATION

#ifdef TIMEZONE
clock {
	timezone ${TIMEZONE};
#ifdef BASELINE
	starttime "${BASELINESTARTTIME}";
	stoptime "${BASELINESTOPTIME}";
#else
#ifdef STARTTIME
	starttime "${STARTTIME}";
#endif // STARTTIME
#ifdef STOPTIME
	stoptime "${STOPTIME}";
#endif // STOPTIME
#endif // BASELINE
}
#else
#error No timezone specified
#endif // TIMEZONE
class waterheater
{
	loadshape wh_shape;
	char1024 supernode_name;
}
class house
{
	char1024 supernode_name;
}

#if SUPERNODES==yes
class powerflow_object {
	char1024 supernode_name;
}
class meter
{
	bool issupernode; // UI definition of supernode
	bool supernode_fault;
	int32 fault_count; // Marks if a fault occured in feeder node
	bool solar_connect; // 1 - solar connected, 0 - no solar
	bool battery_connect; // 1 - battery connected, 0 - no battery
	bool flexible_load_connect; // 1 - flexible connected, 0 - no flexible
	double load_supported;
	int32 number_of_ders;
	double flexible_load;
	double peak_load;
	double min_load;
	bool supernode_loaded;
	double customers_supported;
	char1024 fault_type;
}

class solar
{
	char1024 supernode_name;
}
class battery
{
	char1024 supernode_name;
}
class inverter
{
	char1024 supernode_name;
}

#endif //SUPERNODES

#if LOAD_CONTROL==TRUE
// class to implement sharing of island group information
class islanding_control
{
    char1024 groupinfo;
    char1024 substation_nodes;
    char1024 feeder_A;
    char1024 feeder_B;
    char1024 feeder_C;
}

// implement the island group control information
object islanding_control
{
    // use this name to access this island group island control, e.g.,
    // >> gridlabd.get_value("island_info",property_name)
    name "island_info";

    // use python json module to access this as a dict, e.g.,
    // >> json.loads(gridlabd.get_value("island_info","groupinfo"))
    //groupinfo "{'0':['substation_nodes','feeder_A','feeder_B','feeder_C']}";
    groupinfo "{\"0\": [\"substation_nodes\",\"feeder_A\",\"feeder_B\",\"feeder_C\"]}";
    //groupinfo "{'0':['substation_nodes',group_A'],'1':['group_B','group_C']}";

    // use python json module to change this, e.g.
    // >> new_values = {'0':['feeder',group_A','group_B'],'1':[group_C']}
    // >> gridlabd.set_value("island_info","groupinfo",json.dumps(new_values))
    //
    // this is what a system with group_C running as an island looks like
    // >> groupinfo "{'0':['feeder',group_A','group_B'],'1':[group_C']}";

    // these are provided for convenience
    // TODO: generated these automatically from the node group id info
    substation_nodes "[\"supernode_001\",\"supernode_002\"]";
    feeder_A "[\"supernode_101\",\"supernode_102\",\"supernode_103\"]";
    feeder_B "[\"supernode_201\",\"supernode_202\",\"supernode_203\"]";
    feeder_C "[\"supernode_301\",\"supernode_302\",\"supernode_303\"]";
	//on_commit python:load_control.absorption;
}
#endif //LOADCONTROL

class supernodes
{
	char1024 node_group;
}

object supernodes
{
	name "supernode_list";
	node_group "['supernode_001', 'supernode_002', 'supernode_003','supernode_101', 'supernode_102', 'supernode_103', 'supernode_201', 'supernode_202', 'supernode_203', 'supernode_301', 'supernode_302', 'supernode_303']";

}


///////////////////////////////////////////////////////
//
// WEATHER
//
///////////////////////////////////////////////////////
#ifexist ${WEATHER}
module climate;
object climate {
        name weather;
        tmyfile "${WEATHER}";
        interpolate QUADRATIC;
}
#else
#error No weather specified.
#endif // exist WEATHER

///////////////////////////////////////////////////////
//
// POWER SYSTEM MODEL
//
///////////////////////////////////////////////////////


//
// Powerflow component configurations
//

//#include "library/lines.glm"
/// OVERHEAD LINE CONDUCTORS
object overhead_line_conductor {
	name olc_default;	//336,400 26/7 ACSR
	geometric_mean_radius 0.0244;
	resistance 0.306;
	diameter 0.721;
}

object line_spacing {
	name ls_default;
	distance_AB 0.5;
	distance_AC 1.0;
	distance_BC 0.5;
}

object line_configuration {
	name lc_default_A;
	conductor_A olc_default;
	conductor_N olc_default;
	spacing ls_default;
}
object line_configuration {
	name lc_default_B;
	conductor_B olc_default;
	conductor_N olc_default;
	spacing ls_default;
}
object line_configuration {
	name lc_default_C;
	conductor_C olc_default;
	conductor_N olc_default;
	spacing ls_default;
}

object line_configuration {
	name lc_default_ABC;
	conductor_A olc_default;
	conductor_B olc_default;
	conductor_C olc_default;
	conductor_N olc_default;
	spacing ls_default;
}

// Network Lines
//Lines between nodes and spot loads
object overhead_line {
	name line_node101A_load101A;
	phases AN;
	from node_101A;
	to load_101A;
	length 175.00;
	configuration lc_default_A;
#if SUPERNODES==yes
	supernode_name supernode_101;
#endif //SUPERNODES
}
object overhead_line {
	name line_node101B_load101B;
	phases BN;
	from node_101B;
	to load_101B;
	length 175.00;
	configuration lc_default_B;
#if SUPERNODES==yes
	supernode_name supernode_101;
#endif //SUPERNODES
}
object overhead_line {
	name line_node101C_load101C;
	phases CN;
	from node_101C;
	to load_101C;
	length 175.00;
	configuration lc_default_C;
#if SUPERNODES==yes
	supernode_name supernode_101;
#endif //SUPERNODES
}

object overhead_line {
	name line_node102A_load102A;
	phases AN;
	from node_102A;
	to load_102A;
	length 175.00;
	configuration lc_default_A;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}
object overhead_line {
	name line_node102B_load102B;
	phases BN;
	from node_102B;
	to load_102B;
	length 175.00;
	configuration lc_default_B;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}
object overhead_line {
	name line_node102C_load102C;
	phases CN;
	from node_102C;
	to load_102C;
	length 175.00;
	configuration lc_default_C;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}

object overhead_line {
	name line_node103A_load103A;
	phases AN;
	from node_103A;
	to load_103A;
	length 175.00;
	configuration lc_default_A;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
}
object overhead_line {
	name line_node103B_load103B;
	phases BN;
	from node_103B;
	to load_103B;
	length 175.00;
	configuration lc_default_B;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
}
object overhead_line {
	name line_node103C_load103C;
	phases CN;
	from node_103C;
	to load_103C;
	length 175.00;
	configuration lc_default_C;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
}

object overhead_line {
	name line_node201A_load201A;
	phases AN;
	from node_201A;
	to load_201A;
	length 175.00;
	configuration lc_default_A;
#if SUPERNODES==yes
	supernode_name supernode_201;
#endif //SUPERNODES
}
object overhead_line {
	name line_node201B_load201B;
	phases BN;
	from node_201B;
	to load_201B;
	length 175.00;
	configuration lc_default_B;
#if SUPERNODES==yes
	supernode_name supernode_201;
#endif //SUPERNODES
}
object overhead_line {
	name line_node201C_load201C;
	phases CN;
	from node_201C;
	to load_201C;
	length 175.00;
	configuration lc_default_C;
#if SUPERNODES==yes
	supernode_name supernode_201;
#endif //SUPERNODES
}

object overhead_line {
	name line_node202A_load202A;
	phases AN;
	from node_202A;
	to load_202A;
	length 175.00;
	configuration lc_default_A;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}
object overhead_line {
	name line_node202B_load202B;
	phases BN;
	from node_202B;
	to load_202B;
	length 175.00;
	configuration lc_default_B;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}
object overhead_line {
	name line_node202C_load202C;
	phases CN;
	from node_202C;
	to load_202C;
	length 175.00;
	configuration lc_default_C;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}

object overhead_line {
	name line_node203A_load203A;
	phases AN;
	from node_203A;
	to load_203A;
	length 175.00;
	configuration lc_default_A;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
}
object overhead_line {
	name line_node203B_load203B;
	phases BN;
	from node_203B;
	to load_203B;
	length 175.00;
	configuration lc_default_B;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
}
object overhead_line {
	name line_node203C_load203C;
	phases CN;
	from node_203C;
	to load_203C;
	length 175.00;
	configuration lc_default_C;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
}

object overhead_line {
	name line_node301A_load301A;
	phases AN;
	from node_301A;
	to load_301A;
	length 175.00;
	configuration lc_default_A;
#if SUPERNODES==yes
	supernode_name supernode_301;
#endif //SUPERNODES
}
object overhead_line {
	name line_node301B_load301B;
	phases BN;
	from node_301B;
	to load_301B;
	length 175.00;
	configuration lc_default_B;
#if SUPERNODES==yes
	supernode_name supernode_301;
#endif //SUPERNODES
}
object overhead_line {
	name line_node301C_load301C;
	phases CN;
	from node_301C;
	to load_301C;
	length 175.00;
	configuration lc_default_C;
#if SUPERNODES==yes
	supernode_name supernode_301;
#endif //SUPERNODES
}

object overhead_line {
	name line_node302A_load302A;
	phases AN;
	from node_302A;
	to load_302A;
	length 175.00;
	configuration lc_default_A;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}
object overhead_line {
	name line_node302B_load302B;
	phases BN;
	from node_302B;
	to load_302B;
	length 175.00;
	configuration lc_default_B;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}
object overhead_line {
	name line_node302C_load302C;
	phases CN;
	from node_302C;
	to load_302C;
	length 175.00;
	configuration lc_default_C;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}

object overhead_line {
	name line_node303A_load303A;
	phases AN;
	from node_303A;
	to load_303A;
	length 175.00;
	configuration lc_default_A;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
}
object overhead_line {
	name line_node303B_load303B;
	phases BN;
	from node_303B;
	to load_303B;
	length 175.00;
	configuration lc_default_B;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
}
object overhead_line {
	name line_node303C_load303C;
	phases CN;
	from node_303C;
	to load_303C;
	length 175.00;
	configuration lc_default_C;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
}
//
// Power system topology
//

object meter {
	name supernode_002;
	measured_energy_delta_timestep ${RECORDINTERVAL};
#if SUPERNODES==yes
	issupernode 1;
	supernode_fault 0;
	fault_count 0;
	solar_connect 0;
	battery_connect 0;
	flexible_load_connect 0;
	load_supported 100;
	number_of_ders 100;
	flexible_load 100;
	supernode_loaded 0;
	customers_supported 0;
	fault_type NONE;
#endif //SUPERNODES
	phases ABCN;
	nominal_voltage 2401.7771;
}
//#include "library/nodes.glm"
//Pure nodes
object meter {
	name supernode_001;
	measured_energy_delta_timestep ${RECORDINTERVAL};
#if SUPERNODES==yes
	issupernode 1;
	supernode_fault 0;
	fault_count 0;
	solar_connect 0;
	battery_connect 0;
	flexible_load_connect 0;
	load_supported 100;
	number_of_ders 100;
	flexible_load 100;
	supernode_loaded 0;
	customers_supported 0;
	fault_type NONE;
#endif //SUPERNODES
	phases ABCN;
	bustype SWING;
	nominal_voltage 12.47 kV;
}

object meter {
	name supernode_003;
	measured_energy_delta_timestep ${RECORDINTERVAL};
#if SUPERNODES==yes
	issupernode 1;
	supernode_fault 0;
	fault_count 0;
	solar_connect 0;
	battery_connect 0;
	flexible_load_connect 0;
	load_supported 100;
	number_of_ders 100;
	flexible_load 100;
	supernode_loaded 0;
	customers_supported 0;
	fault_type NONE;
#endif //SUPERNODES
	phases ABCN;
	nominal_voltage 2401.7771;
}

object meter {
	name supernode_101;
	measured_energy_delta_timestep ${RECORDINTERVAL};
#if SUPERNODES==yes
	issupernode 1;
	supernode_fault 0;
	fault_count 0;
	solar_connect 0;
	battery_connect 0;
	flexible_load_connect 1;
	load_supported 100;
	number_of_ders 100;
	flexible_load 100;
	peak_load 100;
	min_load 100;
	supernode_loaded 1;
	customers_supported 0;
	fault_type NONE;
#endif //SUPERNODES
	phases ABCN;
	bustype SWING_PQ;
	nominal_voltage 2401.7771;
}
object node {
	name node_101A;
	parent supernode_101;
	phases AN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_101;
#endif //SUPERNODES
}
object node {
	name node_101B;
	parent supernode_101;
	phases BN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_101;
#endif //SUPERNODES
}
object node {
	name node_101C;
	parent supernode_101;
	phases CN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_101;
#endif //SUPERNODES
}

object meter {
	name supernode_102;
	measured_energy_delta_timestep ${RECORDINTERVAL};
#if SUPERNODES==yes
	issupernode 1;
	supernode_fault 0;
	fault_count 0;
	solar_connect 1;
	battery_connect 0;
	flexible_load_connect 1;
	load_supported 100;
	number_of_ders 100;
	flexible_load 100;
	peak_load 100;
	min_load 100;
	supernode_loaded 1;
	customers_supported 0;
	fault_type NONE;
#endif //SUPERNODES
	phases ABCN;
	bustype SWING_PQ;
	nominal_voltage 2401.7771;
}
object node {
	name node_102A;
	parent supernode_102;
	phases AN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}
object node {
	name node_102B;
	parent supernode_102;
	phases BN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}
object node {
	name node_102C;
	parent supernode_102;
	phases CN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}
object meter {
	name supernode_103;
	measured_energy_delta_timestep ${RECORDINTERVAL};
#if SUPERNODES==yes
	issupernode 1;
	supernode_fault 0;
	fault_count 0;
	solar_connect 0;
	flexible_load_connect 1;
	battery_connect 1;
	load_supported 100;
	number_of_ders 100;
	flexible_load 100;
	peak_load 100;
	min_load 100;
	supernode_loaded 1;
	customers_supported 0;
	fault_type NONE;
#endif //SUPERNODES
	phases ABCN;
	bustype SWING_PQ;
	nominal_voltage 2401.7771;
}
object node {
	name node_103A;
	parent supernode_103;
	phases AN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
}
object node {
	name node_103B;
	parent supernode_103;
	phases BN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
}
object node {
	name node_103C;
	parent supernode_103;
	phases CN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
}

object meter {
	name supernode_201;
	measured_energy_delta_timestep ${RECORDINTERVAL};
#if SUPERNODES==yes
	issupernode 1;
	supernode_fault 0;
	fault_count 0;
	solar_connect 0;
	battery_connect 0;
	flexible_load_connect 1;
	load_supported 100;
	number_of_ders 100;
	flexible_load 100;
	peak_load 100;
	min_load 100;
	supernode_loaded 1;
	customers_supported 0;
	fault_type NONE;
#endif //SUPERNODES
	phases ABCN;
	bustype SWING_PQ;
	nominal_voltage 2401.7771;
}
object node {
	name node_201A;
	parent supernode_201;
	phases AN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_201;
#endif //SUPERNODES
}
object node {
	name node_201B;
	parent supernode_201;
	phases BN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_201;
#endif //SUPERNODES
}
object node {
	name node_201C;
	parent supernode_201;
	phases CN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_201;
#endif //SUPERNODES
}

object meter {
	name supernode_202;
	measured_energy_delta_timestep ${RECORDINTERVAL};
#if SUPERNODES==yes
	issupernode 1;
	supernode_fault 0;
	fault_count 0;
	solar_connect 1;
	battery_connect 0;
	flexible_load_connect 1;
	load_supported 100;
	number_of_ders 100;
	flexible_load 100;
	peak_load 100;
	min_load 100;
	supernode_loaded 1;
	customers_supported 0;
	fault_type NONE;
#endif //SUPERNODES
	phases ABCN;
	bustype SWING_PQ;
	nominal_voltage 2401.7771;
}
object node {
	name node_202A;
	parent supernode_202;
	phases AN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}
object node {
	name node_202B;
	parent supernode_202;
	phases BN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}
object node {
	name node_202C;
	parent supernode_202;
	phases CN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}

object meter {
	name supernode_203;
	measured_energy_delta_timestep ${RECORDINTERVAL};
#if SUPERNODES==yes
	issupernode 1;
	supernode_fault 0;
	fault_count 0;
	solar_connect 0;
	flexible_load_connect 1;
	battery_connect 1;
	load_supported 100;
	number_of_ders 100;
	flexible_load 100;
	peak_load 100;
	min_load 100;
	supernode_loaded 1;
	customers_supported 0;
	fault_type NONE;
#endif //SUPERNODES
	phases ABCN;
	bustype SWING_PQ;
	nominal_voltage 2401.7771;
}

object node {
	name node_203A;
	parent supernode_203;
	phases AN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
}
object node {
	name node_203B;
	parent supernode_203;
	phases BN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
}
object node {
	name node_203C;
	parent supernode_203;
	phases CN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
}

object meter {
	name supernode_301;
	measured_energy_delta_timestep ${RECORDINTERVAL};
#if SUPERNODES==yes
	issupernode 1;
	supernode_fault 0;
	fault_count 0;
	solar_connect 0;
	battery_connect 0;
	flexible_load_connect 1;
	load_supported 100;
	number_of_ders 100;
	flexible_load 100;
	peak_load 100;
	min_load 100;
	supernode_loaded 1;
	customers_supported 0;
	fault_type NONE;
#endif //SUPERNODES
	phases ABCN;
	bustype SWING_PQ;
	nominal_voltage 2401.7771;
}
object node {
	name node_301A;
	parent supernode_301;
	phases AN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_301;
#endif //SUPERNODES
}
object node {
	name node_301B;
	parent supernode_301;
	phases BN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_301;
#endif //SUPERNODES
}
object node {
	name node_301C;
	parent supernode_301;
	phases CN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_301;
#endif //SUPERNODES
}

object meter {
	name supernode_302;
	measured_energy_delta_timestep ${RECORDINTERVAL};
#if SUPERNODES==yes
	issupernode 1;
	supernode_fault 0;
	fault_count 0;
	solar_connect 1;
	battery_connect 0;
	flexible_load_connect 1;
	load_supported 100;
	number_of_ders 100;
	flexible_load 100;
	peak_load 100;
	min_load 100;
	supernode_loaded 1;
	customers_supported 0;
	fault_type NONE;
#endif //SUPERNODES
	phases ABCN;
	bustype SWING_PQ;
	nominal_voltage 2401.7771;
}
object node {
	name node_302A;
	parent supernode_302;
	phases AN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}
object node {
	name node_302B;
	parent supernode_302;
	phases BN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}
object node {
	name node_302C;
	parent supernode_302;
	phases CN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}
object meter {
	name supernode_303;
	measured_energy_delta_timestep ${RECORDINTERVAL};
#if SUPERNODES==yes
	issupernode 1;
	supernode_fault 0;
	fault_count 0;
	solar_connect 0;
	battery_connect 1;
	flexible_load_connect 1;
	load_supported 100;
	number_of_ders 100;
	flexible_load 100;
	peak_load 100;
	min_load 100;
	supernode_loaded 1;
	customers_supported 0;
	fault_type NONE;
#endif //SUPERNODES
	phases ABCN;
	bustype SWING_PQ;
	nominal_voltage 2401.7771;
}
object node {
	name node_303A;
	parent supernode_303;
	phases AN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
}
object node {
	name node_303B;
	parent supernode_303;
	phases BN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
}
object node {
	name node_303C;
	parent supernode_303;
	phases CN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
}
//Pure spot loads

object load {
	name load_101A;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_101;
#endif //SUPERNODES
}
object load {
	name load_101B;
	groupid nodevolts;
	phases BN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_101;
#endif //SUPERNODES
}
object load {
	name load_101C;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_101;
#endif //SUPERNODES
}

object load {
	name load_102A;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}
object load {
	name load_102B;
	groupid nodevolts;
	phases BN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}
object load {
	name load_102C;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}

object load {
	name load_103A;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
}
object load {
	name load_103B;
	groupid nodevolts;
	phases BN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
}
object load {
	name load_103C;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
}

object load {
	name load_201A;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_201;
#endif //SUPERNODES
}
object load {
	name load_201B;
	groupid nodevolts;
	phases BN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_201;
#endif //SUPERNODES
}
object load {
	name load_201C;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_201;
#endif //SUPERNODES
}

object load {
	name load_202A;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}
object load {
	name load_202B;
	groupid nodevolts;
	phases BN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}
object load {
	name load_202C;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}

object load {
	name load_203A;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
}
object load {
	name load_203B;
	groupid nodevolts;
	phases BN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
}
object load {
	name load_203C;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
}

object load {
	name load_301A;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_301;
#endif //SUPERNODES
}
object load {
	name load_301B;
	groupid nodevolts;
	phases BN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_301;
#endif //SUPERNODES
}
object load {
	name load_301C;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_301;
#endif //SUPERNODES
}

object load {
	name load_302A;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}
object load {
	name load_302B;
	groupid nodevolts;
	phases BN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}
object load {
	name load_302C;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}

object load {
	name load_303A;
	groupid nodevolts;
	phases AN;
	constant_power_A 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
}
object load {
	name load_303B;
	groupid nodevolts;
	phases BN;
	constant_power_B 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
}
object load {
	name load_303C;
	groupid nodevolts;
	phases CN;
	constant_power_C 40000.000000+20000.000000j;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
}


//Switches
object switch {
	name sw_001;
	from supernode_001;
	to supernode_002;
	phases ABCN;
	status CLOSED;
}

object switch {
	name sw_002;
	from supernode_002;
	to supernode_003;
	phases ABCN;
	status CLOSED;
}

object switch {
	name sw_101;
	from supernode_003;
	to supernode_101;
	phases ABCN;
	status CLOSED;
}
object switch {
	name sw_102;
	from supernode_101;
	to supernode_102;
	phases ABCN;
	status CLOSED;
}
object switch {
	name sw_102_103;
	from supernode_102;
	to supernode_103;
	phases ABCN;
	status CLOSED;
}

object switch {
	name sw_201;
	from supernode_003;
	to supernode_201;
	phases ABCN;
	status CLOSED;
}
object switch {
	name sw_202;
	from supernode_201;
	to supernode_202;
	phases ABCN;
	status CLOSED;
}
object switch {
	name sw_202_203;
	from supernode_202;
	to supernode_203;
	phases ABCN;
	status CLOSED;
}

object switch {
	name sw_301;
	from supernode_003;
	to supernode_301;
	phases ABCN;
	status CLOSED;
}
object switch {
	name sw_302;
	from supernode_301;
	to supernode_302;
	phases ABCN;
	status CLOSED;
}
object switch {
	name sw_302_303;
	from supernode_302;
	to supernode_303;
	phases ABCN;
	status CLOSED;
}

object switch {
	name sw_103;
	from supernode_103;
	to supernode_203;
	phases ABCN;
	status OPEN;
}

object switch {
	name sw_303;
	from supernode_303;
	to supernode_203;
	phases ABCN;
	status OPEN;
}
// Switches between batteries and solar
object switch {
	name sw_supernode_102_solar;
	from supernode_102;
	to node_102_solar;
	phases ABCN;
	status CLOSED;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}
object switch {
	name sw_supernode_202_solar;
	from supernode_202;
	to node_202_solar;
	phases ABCN;
	status CLOSED;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}
object switch {
	name sw_supernode_302_solar;
	from supernode_302;
	to node_302_solar;
	phases ABCN;
	status CLOSED;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}
object switch {
	name sw_supernode_103_battery;
	from supernode_103;
	to node_103_battery;
	phases ABCN;
	status CLOSED;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
}
object switch {
	name sw_supernode_203_battery;
	from supernode_203;
	to node_203_battery;
	phases ABCN;
	status CLOSED;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
}
object switch {
	name sw_supernode_303_battery;
	from supernode_303;
	to node_303_battery;
	phases ABCN;
	status CLOSED;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
}


object multi_recorder{
   property sw_001:status,sw_002:status, sw_101:status, sw_102:status, sw_103:status, sw_102_103:status;
   property sw_201:status, sw_202:status, sw_202_203:status;
   property sw_301:status, sw_302:status, sw_303:status, sw_302_303:status;
   property sw_supernode_102_solar:status, sw_supernode_202_solar:status, sw_supernode_302_solar:status; //solar connections
   property sw_supernode_103_battery:status, sw_supernode_203_battery:status, sw_supernode_303_battery:status; //battery connections
   property supernode_001:fault_type, supernode_002:fault_type, supernode_003:fault_type;
   property supernode_101:fault_type, supernode_102:fault_type, supernode_103:fault_type;
   property supernode_201:fault_type, supernode_202:fault_type, supernode_203:fault_type;
   property supernode_301:fault_type, supernode_302:fault_type, supernode_303:fault_type;
   file "log_rec.csv";
   interval -1;
}


object multi_recorder {
	property inv_supernode_102_solar:VA_Out.real[kW], inv_supernode_202_solar:VA_Out.real[kW], inv_supernode_302_solar:VA_Out.real[kW];
	property inv_supernode_103_battery:VA_Out.real[kW], inv_supernode_203_battery:VA_Out.real[kW], inv_supernode_303_battery:VA_Out.real[kW];
	property battery_supernode_103:state_of_charge, battery_supernode_203:state_of_charge, battery_supernode_303:state_of_charge;
	property battery_supernode_103:battery_capacity[kWh], battery_supernode_203:battery_capacity[kWh], battery_supernode_303:battery_capacity[kWh];
	interval ${RECORDINTERVAL};
	file "timeseries_data_gen_strg.csv";
	line_units "NONE";
}


object collector {
	name collector_flexible_load_HVAC;
	group class=house;
	property sum(hvac_load[kW]);
	file "flexible_load_HVAC.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_flexible_load_WH;
	group class=waterheater;
	property sum(actual_load[kW]);
	file "flexible_load_WH.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_total_load;
	group class=triplex_meter;
	property sum(measured_real_energy[kWh]);
#ifdef BASELINE
	file "baseline.csv";
#else
	file "total_load.csv";
#endif // BASELINE
	interval ${RECORDINTERVAL};
	flush 0;
}

object collector {
	name collector_load_supernode_101;
	group class=triplex_meter AND groupid=group_101;
	property sum(measured_real_power[kW]);
	file "total_load_supernode_101.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_HVAC_supernode_101;
	group class=house AND groupid=group_101;
	property sum(hvac_load[kW]);
	file "hvac_load_supernode_101.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_WH_supernode_101;
	group class=waterheater AND groupid=group_101;
	property sum(actual_load[kW]);
	file "wh_load_supernode_101.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_load_supernode_102;
	group class=triplex_meter AND groupid=group_102;
	property sum(measured_real_power[kW]);
	file "total_load_supernode_102.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_HVAC_supernode_102;
	group class=house AND groupid=group_102;
	property sum(hvac_load[kW]);
	file "hvac_load_supernode_102.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_WH_supernode_102;
	group class=waterheater AND groupid=group_102;
	property sum(actual_load[kW]);
	file "wh_load_supernode_102.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_load_supernode_103;
	group class=triplex_meter AND groupid=group_103;
	property sum(measured_real_power[kW]);
	file "total_load_supernode_103.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_HVAC_supernode_103;
	group class=house AND groupid=group_103;
	property sum(hvac_load[kW]);
	file "hvac_load_supernode_103.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_WH_supernode_103;
	group class=waterheater AND groupid=group_103;
	property sum(actual_load[kW]);
	file "wh_load_supernode_103.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_load_supernode_201;
	group class=triplex_meter AND groupid=group_201;
	property sum(measured_real_power[kW]);
	file "total_load_supernode_201.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_HVAC_supernode_201;
	group class=house AND groupid=group_201;
	property sum(hvac_load[kW]);
	file "hvac_load_supernode_201.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_WH_supernode_201;
	group class=waterheater AND groupid=group_201;
	property sum(actual_load[kW]);
	file "wh_load_supernode_201.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_load_supernode_202;
	group class=triplex_meter AND groupid=group_202;
	property sum(measured_real_power[kW]);
	file "total_load_supernode_202.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_HVAC_supernode_202;
	group class=house AND groupid=group_202;
	property sum(hvac_load[kW]);
	file "hvac_load_supernode_202.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_WH_supernode_202;
	group class=waterheater AND groupid=group_202;
	property sum(actual_load[kW]);
	file "wh_load_supernode_202.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_load_supernode_203;
	group class=triplex_meter AND groupid=group_203;
	property sum(measured_real_power[kW]);
	file "total_load_supernode_203.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_HVAC_supernode_203;
	group class=house AND groupid=group_203;
	property sum(hvac_load[kW]);
	file "hvac_load_supernode_203.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_WH_supernode_203;
	group class=waterheater AND groupid=group_203;
	property sum(actual_load[kW]);
	file "wh_load_supernode_203.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_load_supernode_301;
	group class=triplex_meter AND groupid=group_301;
	property sum(measured_real_power[kW]);
	file "total_load_supernode_301.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_HVAC_supernode_301;
	group class=house AND groupid=group_301;
	property sum(hvac_load[kW]);
	file "hvac_load_supernode_301.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_WH_supernode_301;
	group class=waterheater AND groupid=group_301;
	property sum(actual_load[kW]);
	file "wh_load_supernode_301.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_load_supernode_302;
	group class=triplex_meter AND groupid=group_302;
	property sum(measured_real_power[kW]);
	file "total_load_supernode_302.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_HVAC_supernode_302;
	group class=house AND groupid=group_302;
	property sum(hvac_load[kW]);
	file "hvac_load_supernode_302.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_WH_supernode_302;
	group class=waterheater AND groupid=group_302;
	property sum(actual_load[kW]);
	file "wh_load_supernode_302.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_load_supernode_303;
	group class=triplex_meter AND groupid=group_303;
	property sum(measured_real_power[kW]);
	file "total_load_supernode_303.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_HVAC_supernode_303;
	group class=house AND groupid=group_303;
	property sum(hvac_load[kW]);
	file "hvac_load_supernode_303.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}
object collector {
	name collector_WH_supernode_303;
	group class=waterheater AND groupid=group_303;
	property sum(actual_load[kW]);
	file "wh_load_supernode_303.csv";
	interval ${RECORDINTERVAL};
	flush 0;
}


/////////////////////SOLAR///////////////////
object inverter {
	name inv_supernode_102_solar;
	phases AS;
	parent node_102_solar;
	rated_power 15 MW;
	inverter_type FOUR_QUADRANT;
  four_quadrant_control_mode CONSTANT_PF;
	inverter_efficiency 0.95;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}

object solar {
	name solar_supernode_102;
	generator_mode SUPPLY_DRIVEN;
    generator_status ONLINE;
    panel_type SINGLE_CRYSTAL_SILICON;
    parent inv_supernode_102_solar;
    rated_power 0.3 MW;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}

object meter {
	name node_102_solar;
	phases ABCN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_102;
#endif //SUPERNODES
}

object inverter {
	name inv_supernode_202_solar;
	phases AS;
	parent node_202_solar;
	rated_power 15 MW;
	inverter_type FOUR_QUADRANT;
  four_quadrant_control_mode CONSTANT_PF;
	inverter_efficiency 0.95;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}

object solar {
	name solar_supernode_202;
	generator_mode SUPPLY_DRIVEN;
    generator_status ONLINE;
    panel_type SINGLE_CRYSTAL_SILICON;
    parent inv_supernode_202_solar;
    rated_power 0.3 MW;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}

object meter {
	name node_202_solar;
	phases ABCN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_202;
#endif //SUPERNODES
}

object inverter {
	name inv_supernode_302_solar;
	phases AS;
	parent node_302_solar;
	rated_power 15 MW;
	inverter_type FOUR_QUADRANT;
  four_quadrant_control_mode CONSTANT_PF;
	inverter_efficiency 0.95;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}

object solar {
	name solar_supernode_302;
	generator_mode SUPPLY_DRIVEN;
    generator_status ONLINE;
    panel_type SINGLE_CRYSTAL_SILICON;
    parent inv_supernode_302_solar;
    rated_power 0.3 MW;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}

object meter {
	name node_302_solar;
	phases ABCN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_302;
#endif //SUPERNODES
}

/////////////////////BATTERY///////////////////
object inverter {
    name inv_supernode_103_battery;
	parent node_103_battery;
    inverter_type FOUR_QUADRANT;
    four_quadrant_control_mode LOAD_FOLLOWING;
    sense_object supernode_103;
	generator_mode SUPPLY_DRIVEN;
	generator_status ONLINE;
	inverter_efficiency 1.0;
    rated_power 3 MW;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
	//islanded_state 1;
	charge_on_threshold -0.2 kW;
	charge_off_threshold -0.1 kW;
	discharge_off_threshold 0.1 kW;
	discharge_on_threshold 0.2 kW;
	max_discharge_rate 0.3 MW;
	max_charge_rate 0.3 MW;
	soc_reserve 0.01;
	battery_soc 1.0;
}
object battery {
	name battery_supernode_103;
	parent inv_supernode_103_battery;
	use_internal_battery_model true;
	battery_type LI_ION;
	battery_capacity 1.0 MWh;
	base_efficiency 1.0;
	state_of_charge 1.0;
	// reserve_state_of_charge 0.0;
	generator_mode SUPPLY_DRIVEN;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
}

object meter {
	name node_103_battery;
	phases ABCN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_103;
#endif //SUPERNODES
}

object inverter {
    name inv_supernode_203_battery;
	parent node_203_battery;
    inverter_type FOUR_QUADRANT;
    four_quadrant_control_mode LOAD_FOLLOWING;
    sense_object supernode_203;
	generator_mode SUPPLY_DRIVEN;
	generator_status ONLINE;
	inverter_efficiency 1.0;
    rated_power 3 MW;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
	//islanded_state 1;
	charge_on_threshold -0.2 kW;
	charge_off_threshold -0.1 kW;
	discharge_off_threshold 0.1 kW;
	discharge_on_threshold 0.2 kW;
	max_discharge_rate 0.3 MW;
	max_charge_rate 0.3 MW;
	soc_reserve 0.01;
	battery_soc 1.0;
}
object battery {
	name battery_supernode_203;
	parent inv_supernode_203_battery;
	use_internal_battery_model true;
	battery_type LI_ION;
	battery_capacity 1.0 MWh;
	base_efficiency 1.0;
	state_of_charge 1.0;
	// reserve_state_of_charge 0.0;
	generator_mode SUPPLY_DRIVEN;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
}

object meter {
	name node_203_battery;
	phases ABCN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_203;
#endif //SUPERNODES
}

object inverter {
    name inv_supernode_303_battery;
	parent node_303_battery;
    inverter_type FOUR_QUADRANT;
    four_quadrant_control_mode LOAD_FOLLOWING;
    sense_object supernode_303;
	generator_mode SUPPLY_DRIVEN;
	generator_status ONLINE;
	inverter_efficiency 1.0;
    rated_power 3 MW;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
	//islanded_state 1;
	charge_on_threshold -0.2 kW;
	charge_off_threshold -0.1 kW;
	discharge_off_threshold 0.1 kW;
	discharge_on_threshold 0.2 kW;
	max_discharge_rate 0.3 MW;
	max_charge_rate 0.3 MW;
	soc_reserve 0.01;
	battery_soc 1.0;
}
object battery {
	name battery_supernode_303;
	parent inv_supernode_303_battery;
	use_internal_battery_model true;
	battery_type LI_ION;
	battery_capacity 1.0 MWh;
	base_efficiency 1.0;
	state_of_charge 1.0;
	// reserve_state_of_charge 0.0;
	generator_mode SUPPLY_DRIVEN;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
}

object meter {
	name node_303_battery;
	phases ABCN;
	nominal_voltage 2401.7771;
#if SUPERNODES==yes
	supernode_name supernode_303;
#endif //SUPERNODES
}

//#include "library/loads.glm"
// IEEE-123 dynamic loads
// Copyright (C) 2016, Stanford University
// Author: dchassin@slac.stanford.edu
object transformer_configuration {
	name xfmr_config_A;
	connect_type SINGLE_PHASE_CENTER_TAPPED;
	install_type POLETOP;
	powerA_rating 75;
	primary_voltage 2401;
	secondary_voltage 120.000 V;
	impedance 0.006+0.0136j;
}
object transformer_configuration {
	name xfmr_config_B;
	connect_type SINGLE_PHASE_CENTER_TAPPED;
	install_type POLETOP;
	powerB_rating 75;
	primary_voltage 2401 V;
	secondary_voltage 120.000 V;
	impedance 0.006+0.0136j;
}
object transformer_configuration {
	name xfmr_config_C;
	connect_type SINGLE_PHASE_CENTER_TAPPED;
	install_type POLETOP;
	powerC_rating 75;
	primary_voltage 2401 V;
	secondary_voltage 120.000 V;
	impedance 0.006+0.0136j;
}

global int32 SEQ_CUSTID 0;
#set allow_reinclude=true

schedule waterheater_demand_prob {
	* 5-21 * * * 0.99;
	* 22-4 * * * 0.01;
}

#define COUNT=20
#define AREA=A
//#include using(AREA=A,LOADID=101,PHASE=A,COUNT=10) "library/house.glm"
#define LOADID=101
#define PHASE=A
#define SNODE=supernode_101
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR

#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION

#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
object recorder {
	parent `waterheater_{SEQ_CUSTID}`;
	property actual_load,water_demand,demand,temperature;
	interval ${RECORDINTERVAL};
	file `waterheater_{SEQ_CUSTID}.csv`;
	};
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
	  four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD


//#include using(AREA=A,LOADID=101,PHASE=B,COUNT=10) "library/house.glm"
#define LOADID=101
#define PHASE=B
#define SNODE=supernode_101
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION

#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
	  four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

//#include using(AREA=A,LOADID=101,PHASE=C,COUNT=10) "library/house.glm"
#define LOADID=101
#define PHASE=C
#define SNODE=supernode_101
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION

#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
	  four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

#define LOADID=102
#define PHASE=A
#define SNODE=supernode_102
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION

#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
	  four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD


//#include using(AREA=A,LOADID=101,PHASE=B,COUNT=10) "library/house.glm"
#define LOADID=102
#define PHASE=B
#define SNODE=supernode_102
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		generator_mode CONSTANT_PF;
		generator_status ONLINE;
		inverter_efficiency 0.9;
		inverter_type PWM;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

//#include using(AREA=A,LOADID=101,PHASE=C,COUNT=10) "library/house.glm"
#define LOADID=102
#define PHASE=C
#define SNODE=supernode_102
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

#define LOADID=103
#define PHASE=A
#define SNODE=supernode_103
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD


//#include using(AREA=A,LOADID=101,PHASE=B,COUNT=10) "library/house.glm"
#define LOADID=103
#define PHASE=B
#define SNODE=supernode_103
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR


#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

//#include using(AREA=A,LOADID=101,PHASE=C,COUNT=10) "library/house.glm"
#define LOADID=103
#define PHASE=C
#define SNODE=supernode_103
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD



//// FEEDER 2/////////
#define LOADID=201
#define PHASE=A
#define SNODE=supernode_201
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD


//#include using(AREA=A,LOADID=101,PHASE=B,COUNT=10) "library/house.glm"
#define LOADID=201
#define PHASE=B
#define SNODE=supernode_201
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

//#include using(AREA=A,LOADID=101,PHASE=C,COUNT=10) "library/house.glm"
#define LOADID=201
#define PHASE=C
#define SNODE=supernode_201
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

#define LOADID=202
#define PHASE=A
#define SNODE=supernode_201
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD


//#include using(AREA=A,LOADID=101,PHASE=B,COUNT=10) "library/house.glm"
#define LOADID=202
#define PHASE=B
#define SNODE=supernode_202
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

//#include using(AREA=A,LOADID=101,PHASE=C,COUNT=10) "library/house.glm"
#define LOADID=202
#define PHASE=C
#define SNODE=supernode_202
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

#define LOADID=203
#define PHASE=A
#define SNODE=supernode_203
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD


//#include using(AREA=A,LOADID=101,PHASE=B,COUNT=10) "library/house.glm"
#define LOADID=203
#define PHASE=B
#define SNODE=supernode_203
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

//#include using(AREA=A,LOADID=101,PHASE=C,COUNT=10) "library/house.glm"
#define LOADID=203
#define PHASE=C
#define SNODE=supernode_203
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD



//// FEEDER 3 ///////
#define LOADID=301
#define PHASE=A
#define SNODE=supernode_301
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD


//#include using(AREA=A,LOADID=101,PHASE=B,COUNT=10) "library/house.glm"
#define LOADID=301
#define PHASE=B
#define SNODE=supernode_301
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

//#include using(AREA=A,LOADID=101,PHASE=C,COUNT=10) "library/house.glm"
#define LOADID=301
#define PHASE=C
#define SNODE=supernode_301
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

#define LOADID=302
#define PHASE=A
#define SNODE=supernode_302
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD


//#include using(AREA=A,LOADID=101,PHASE=B,COUNT=10) "library/house.glm"
#define LOADID=302
#define PHASE=B
#define SNODE=supernode_302
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

//#include using(AREA=A,LOADID=101,PHASE=C,COUNT=10) "library/house.glm"
#define LOADID=302
#define PHASE=C
#define SNODE=supernode_302
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

#define LOADID=303
#define PHASE=A
#define SNODE=supernode_303
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD


//#include using(AREA=A,LOADID=101,PHASE=B,COUNT=10) "library/house.glm"
#define LOADID=303
#define PHASE=B
#define SNODE=supernode_303
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

//#include using(AREA=A,LOADID=101,PHASE=C,COUNT=10) "library/house.glm"
#define LOADID=303
#define PHASE=C
#define SNODE=supernode_303
// connect dynamics load
#if LOADS==on
#debug Converting area ${AREA} static load ${LOADID} phase ${PHASE} to ${COUNT} houses
modify load_${LOADID}${PHASE}.groupid area_${AREA};
modify load_${LOADID}${PHASE}.constant_power_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_current_${PHASE} 0+0j;
modify load_${LOADID}${PHASE}.constant_impedance_${PHASE} 0+0j;
#define XLOAD=yes
#else
#if MYSQL_AMI==on
object recorder {
	parent load_${LOADID}${PHASE};
	connection ami;
	table load;
	property "measured_voltage_A,measured_voltage_B,measured_voltage_C,measured_voltage_AB,measured_voltage_BC,measured_voltage_CA";
	interval ${RECORDINTERVAL};
	header_fieldnames "name";
};
#endif // MYSQL_AMI
#endif // LOADS

// add solar panel installation rank
#if SOLAR==on
#ifndef XLOAD
#define XLOAD=yes
#endif // XLOAD
#ifdef PVPROB
class solar {
	double installed;
}
#endif // PVPROB
#endif // SOLAR



#ifdef XLOAD
// load/solar connection
object transformer {
	name xfrm_${LOADID}${PHASE};
	phases ${PHASE}S;
	from load_${LOADID}${PHASE};
	to node_${LOADID}${PHASE}${PHASE};
	configuration xfmr_config_${PHASE};
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_node {
	name node_${LOADID}${PHASE}${PHASE};
	phases ${PHASE}S;
	nominal_voltage 120;
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
}
object triplex_meter:..${COUNT} {
	name `meter_{SEQ_CUSTID:INC}`;
	measured_energy_delta_timestep ${RECORDINTERVAL};
	nominal_voltage 120;
	phases ${PHASE}S;
	groupid group_${LOADID};
	parent node_${LOADID}${PHASE}${PHASE};
	latitude (load_${LOADID}${PHASE}.latitude);
	longitude (load_${LOADID}${PHASE}.longitude);
#if SUPERNODES==yes
	supernode_name ${SNODE};
#endif //SUPERNODES
	object house {
		name `house_{SEQ_CUSTID}`;
		groupid group_${LOADID};
		floor_area random.triangle(1000,1500);
		cooling_setpoint 76 degF;
		heating_setpoint 65 degF;
		hvac_power_factor 0.75;
#if SUPERNODES==yes
		supernode_name ${SNODE};
#endif //SUPERNODES
#if LOCATION == BUR_VT
		thermal_integrity_level VERY_GOOD;
#endif //LOCATION
#if LOCATION == LA_CA
		thermal_integrity_level ABOVE_NORMAL;
#endif //LOCATION


#if LOADS == on
		object waterheater {
			name `waterheater_{SEQ_CUSTID}`;
			groupid group_${LOADID};
			wh_shape "type: pulsed; schedule: waterheater_demand_prob; energy: 7.2 kWh; count: 6; power: 300 W";
			tank_setpoint 130;
			water_demand this.wh_shape*0.165; //scaling issue with loadshape/schedules
			heating_element_capacity 4500 W;
			tank_volume 50 gal;
			power_factor 1.0;
			power_fraction 0.0;
			current_fraction 0.0;
#if SUPERNODES==yes
			supernode_name ${SNODE};
#endif //SUPERNODES

		}; //WH
	}; //House

#endif // LOADS
#if MYSQL_AMI==on
	object recorder {
		connection ami;
		table meter;
		property "measured_voltage_1,measured_voltage_2,measured_demand,measured_real_power,measured_reactive_power,measured_real_energy,measured_reactive_energy,measured_current_1,measured_current_2,measured_current_N";
		interval ${RECORDINTERVAL};
		header_fieldnames "name,groupid";
	};
#endif // MYSQL_AMI
#if SOLAR==on
	object inverter {
		name `inverter_{SEQ_CUSTID}`;
		phases ${PHASE}S;
		rated_power 25000;
		inverter_type FOUR_QUADRANT;
		four_quadrant_control_mode CONSTANT_PF;
		inverter_efficiency 0.9;
		object solar {
			name `solar_{SEQ_CUSTID}`;
			phases ${PHASE}S;
#ifndef PVAREA
			area 350 sf;
#else
			area ${PVAREA};
#endif // PVAREA
#ifndef PVPROB
			generator_status ONLINE;
#else
			installed random.bernoulli(${PVPROB});
			generator_status ($installed) ? OFFLINE : ONLINE;
#endif // PVPROB
			generator_mode SUPPLY_DRIVEN;
			panel_type SINGLE_CRYSTAL_SILICON;
#ifdef MYSQL_AMI
			object recorder {
				connection ami;
				table solar;
				property "Insolation";
				interval ${RECORDINTERVAL};
				header_fieldnames "name";
			};
#endif // MYSQL_AMI
		};
#if MYSQL_AMI==on
		object recorder {
			connection ami;
			table inverter;
			property "VA_Out";
			interval ${RECORDINTERVAL};
			header_fieldnames "name";
		};
#endif // MYSQL_AMI
	};
#endif // SOLAR
}
#endif // XLOAD

#define NHOUSES=${SEQ_CUSTID}



//
// Switch coordinator
//
object switch_coordinator {
	name scheme_1;
	connect sw_001;
	connect sw_002;
	connect sw_101;
	connect sw_102;
	connect sw_102_103;
	connect sw_201;
	connect sw_202;
	connect sw_202_203;
	connect sw_301;
	connect sw_302;
	connect sw_302_303;
	connect sw_103;
	connect sw_303;
	connect sw_supernode_102_solar;
	connect sw_supernode_202_solar;
	connect sw_supernode_302_solar;
	connect sw_supernode_103_battery;
	connect sw_supernode_203_battery;
	connect sw_supernode_303_battery;
}

#if COMMERCIALLOADFLAG==ON
object ceus {
	parent supernode_101;
	name large_office;
	filename "ceus_input/FCZ01_RETL.csv";
	floor_area 100 ksf;
	weather weather;
	composition "Cooling:{ZR:0.9;PR:0.1;PI:0.01;Tc:100;Tc0:70;Tc1:100}";
	composition "Ventilation:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Water_Heating:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Refrigeration:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Exterior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Interior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Office_Equipment:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Miscellaneous:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Motors:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Air_Compressors:{ZR:0.9;PR:0.1;PI:0.01}";
	object recorder {
		file load_ceus_101.csv;
		property total_real_power[kW];
		interval ${RECORDINTERVAL};
	};
}

object ceus {
	parent supernode_102;
	name small_office;
	filename "ceus_input/FCZ01_SOFF.csv";
	floor_area 10 ksf;
	weather weather;
	composition "Heating:{ZR:0.9;PR:0.1;PI:0.01;Th:-100;Th0:50;Th1:20;}";
	composition "Cooling:{ZR:0.9;PR:0.1;PI:0.01;Tc:100;Tc0:70;Tc1:100;}";
	composition "Ventilation:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Water_Heating:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Refrigeration:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Exterior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Interior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Office_Equipment:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Miscellaneous:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Motors:{ZR:0.9;PR:0.1;PI:0.01}";
	object recorder {
		file load_ceus_102.csv;
		property total_real_power[kW];
		interval ${RECORDINTERVAL};
	};
}
object ceus {
	parent supernode_103;
	name refrigerated_warehouse;
	filename "ceus_input/FCZ01_REFW.csv";
	floor_area 10 ksf;
	weather weather;
	composition "Cooling:{ZR:0.9;PR:0.1;PI:0.01;Tc:100;Tc0:70;Tc1:100;}";
	composition "Ventilation:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Water_Heating:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Refrigeration:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Exterior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Interior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Office_Equipment:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Miscellaneous:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Motors:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Air_Compressors:{ZR:0.9;PR:0.1;PI:0.01}";
	object recorder {
		file load_ceus_103.csv;
		property total_real_power[kW];
		interval ${RECORDINTERVAL};
	};
}
object ceus {
	parent supernode_201;
	name grocery;
	filename "ceus_input/FCZ01_GROC.csv";
	floor_area 10 ksf;
	weather weather;
	composition "Cooling:{ZR:0.9;PR:0.1;PI:0.01;Tc:100;Tc0:70;Tc1:100;}";
	composition "Ventilation:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Refrigeration:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Exterior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Interior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Office_Equipment:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Miscellaneous:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Motors:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Air_Compressors:{ZR:0.9;PR:0.1;PI:0.01}";
	object recorder {
		file load_ceus_201.csv;
		property total_real_power[kW];
		interval ${RECORDINTERVAL};
	};
}

object ceus {
	parent supernode_202;
	name all_office;
	filename "ceus_input/FCZ01_AOFF.csv";
	floor_area 10 ksf;
	weather weather;
	composition "Heating:{ZR:0.9;PR:0.1;PI:0.01;Th:-100;Th0:50;Th1:20;}";
	composition "Cooling:{ZR:0.9;PR:0.1;PI:0.01;Tc:100;Tc0:70;Tc1:100;}";
	composition "Ventilation:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Water_Heating:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Refrigeration:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Exterior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Interior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Office_Equipment:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Miscellaneous:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Motors:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Air_Compressors:{ZR:0.9;PR:0.1;PI:0.01}";
	object recorder {
		file load_ceus_202.csv;
		property total_real_power[kW];
		interval ${RECORDINTERVAL};
	};
}

object ceus {
	parent supernode_203;
	name college;
	filename "ceus_input/FCZ01_COLL.csv";
	floor_area 10 ksf;
	weather weather;
	composition "Heating:{ZR:0.9;PR:0.1;PI:0.01;Th:-100;Th0:50;Th1:20;}";
	composition "Cooling:{ZR:0.9;PR:0.1;PI:0.01;Tc:100;Tc0:70;Tc1:100;}";
	composition "Ventilation:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Refrigeration:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Exterior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Interior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Office_Equipment:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Miscellaneous:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Motors:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Air_Compressors:{ZR:0.9;PR:0.1;PI:0.01}";
	object recorder {
		file load_ceus_203.csv;
		property total_real_power[kW];
		interval ${RECORDINTERVAL};
	};
}

object ceus {
	parent supernode_301;
	name all_warehouse;
	filename "ceus_input/FCZ01_AWHS.csv";
	floor_area 10 ksf;
	weather weather;
	composition "Cooling:{ZR:0.9;PR:0.1;PI:0.01;Tc:100;Tc0:70;Tc1:100;}";
	composition "Ventilation:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Water_Heating:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Refrigeration:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Exterior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Interior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Office_Equipment:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Miscellaneous:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Motors:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Air_Compressors:{ZR:0.9;PR:0.1;PI:0.01}";
	object recorder {
		file load_ceus_301.csv;
		property total_real_power[kW];
		interval ${RECORDINTERVAL};
	};
}

object ceus {
	parent supernode_302;
	name health;
	filename "ceus_input/FCZ01_HLTH.csv";
	floor_area 10 ksf;
	weather weather;
	composition "Heating:{ZR:0.9;PR:0.1;PI:0.01;Th:-100;Th0:50;Th1:20;}";
	composition "Cooling:{ZR:0.9;PR:0.1;PI:0.01;Tc:100;Tc0:70;Tc1:100;}";
	composition "Ventilation:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Water_Heating:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Refrigeration:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Exterior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Interior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Office_Equipment:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Miscellaneous:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Motors:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Air_Compressors:{ZR:0.9;PR:0.1;PI:0.01}";
	object recorder {
		file load_ceus_302.csv;
		property total_real_power[kW];
		interval ${RECORDINTERVAL};
	};
}

object ceus {
	parent supernode_303;
	name lodging;
	filename "ceus_input/FCZ01_LODG.csv";
	floor_area 10 ksf;
	weather weather;
	composition "Heating:{ZR:0.9;PR:0.1;PI:0.01;Th:-100;Th0:50;Th1:20;}";
	composition "Cooling:{ZR:0.9;PR:0.1;PI:0.01;Tc:100;Tc0:70;Tc1:100;}";
	composition "Ventilation:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Refrigeration:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Exterior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Interior_Lighting:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Office_Equipment:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Miscellaneous:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Motors:{ZR:0.9;PR:0.1;PI:0.01}";
	composition "Air_Compressors:{ZR:0.9;PR:0.1;PI:0.01}";
	object recorder {
		file load_ceus_303.csv;
		property total_real_power[kW];
		interval ${RECORDINTERVAL};
	};
}


#endif
